package formularios.seguridad;

import phc.ParametrosDeConexionBD;
import formularios.ItemDeCombo;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 * Constructor
 * 
 * @author Usuario
 */
public class FrmCrearNuevoUsuario extends javax.swing.JFrame {
///////////////////ATRIBUTOS
    private JFrame padre;//para simular una ventana modal
///////////////////METODOS

    /**
     * Constructor
     */
    public FrmCrearNuevoUsuario(JFrame padre) {
        initComponents();//inicialización de componenetes por el editor de formularios de NetBeans       
        this.setLocationRelativeTo(null);//Para centrarlo en el escritorio
        this.setVisible(true);//Hacemos visible
        
        padre.setEnabled(false);//para simular una ventana modal el padre (la ventana principal) se deshabilitará
        this.padre = padre;//lo rehabilito en el evento WindowClosed.
        
        /*Necesito que el combo se llene con empleados que no son usuarios del sistema*/
        
        /*Declaro los Connection, los Statement y los ResusltSet que necesitaré y creo una conexión
        que cierro al final del método luego de trabajar con la base de datos*/
        Connection con = null;
        Statement st = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            Class.forName(ParametrosDeConexionBD.DRIVER_JDBC); //Iniciamos el driver encargado de conectar con el servidor.
            con = DriverManager.getConnection(ParametrosDeConexionBD.URL,
                    ParametrosDeConexionBD.USUARIO, ParametrosDeConexionBD.CONTRASEÑA);
            //Devuelve una conexión abierta a la base de datos. Es como loguearse a MySQL y luego ejecutar USE nombreBD;
            System.out.println("Se estableció la conexión con el servidor de datos");
            
            String sql = "SELECT * FROM empleado LEFT JOIN usuario ON empleado.idEmpleado=usuario.idEmpleado WHERE usuario.idEmpleado IS null";
            //quiero los empleados que no son usuarios del sistema
            st = con.createStatement();
            rs = st.executeQuery(sql);
            while(rs.next()){
                ItemDeCombo item = new ItemDeCombo();
                item.setId(rs.getInt("idEmpleado"));//guardo el id del empleado en el item
                item.setCadena(rs.getString("idEmpleado")+" - "+ rs.getString("apellido") +", "+ rs.getString("nombre") );
                //id+apellido+,+nombre
                cmbEmpleado.addItem(item);
            }
            if(cmbEmpleado.getSelectedIndex()== -1){//si el combo está vacío...
                JOptionPane.showMessageDialog(
                        this, //el JFrame en el cuál se mostrará el mensaje
                        "Todos los empleados ya son usuarios del sistema",//mensaje 
                        "Imposible crear nuevos usuarios", //título del Dialog
                        JOptionPane.ERROR_MESSAGE //tipo de mensaje.
                    );
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmIniciarSesion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {//Si Class.forName() no encontró el driver
            Logger.getLogger(FrmIniciarSesion.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("No se encontró el driver "+ ParametrosDeConexionBD.DRIVER_JDBC);
        } finally{//libero recursos
            try{
                if(rs != null){rs.close(); System.out.println("ResultSets cerrados");}//liberamos los ResultSet
                if(st != null){st.close(); System.out.println("Statements cerrados");}//liberamos los Statement
                if(ps != null){ps.close(); System.out.println("PreparedStatements cerrados");}//liberamos los PreparedStatement
                if(con != null){con.close(); System.out.println("Connections cerrados");}//liberamos las conexiónes
            } catch (Exception ex){
                ex.printStackTrace();
                System.out.println("Algunos recursos de la conexión con el DBMS no pudieron ser liberados");
            }
        }
    }
    public FrmCrearNuevoUsuario(){
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cmbEmpleado = new javax.swing.JComboBox();
        btnConvertirEnUsuario = new javax.swing.JButton();
        btnVolver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Crear nuevo usuario");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel1.setText("Empleado");

        btnConvertirEnUsuario.setText("Convertir en usuario");
        btnConvertirEnUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConvertirEnUsuarioActionPerformed(evt);
            }
        });

        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnVolver))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbEmpleado, 0, 257, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnConvertirEnUsuario)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConvertirEnUsuario))
                .addGap(18, 18, 18)
                .addComponent(btnVolver)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        padre.setEnabled(true);
    }//GEN-LAST:event_formWindowClosed

    private void btnConvertirEnUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConvertirEnUsuarioActionPerformed
        /*Convierto al empleado seleccionado en el combo en un usuario del sistema*/
        
        /*Declaro los Connection, los Statement y los ResusltSet que necesitaré y creo una conexión
        que cierro al final del método luego de trabajar con la base de datos*/
        Connection con = null;
        Statement st = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            Class.forName(ParametrosDeConexionBD.DRIVER_JDBC); //Iniciamos el driver encargado de conectar con el servidor.
            con = DriverManager.getConnection(ParametrosDeConexionBD.URL,
                    ParametrosDeConexionBD.USUARIO, ParametrosDeConexionBD.CONTRASEÑA);
            //Devuelve una conexión abierta a la base de datos. Es como loguearse a MySQL y luego ejecutar USE nombreBD;
            System.out.println("Se estableció la conexión con el servidor de datos");
            
            if(cmbEmpleado.getSelectedIndex()> -1){//si el combo tiene al menos un ítem...
                String sql = "SELECT * FROM empleado WHERE idEmpleado="+ ((ItemDeCombo)cmbEmpleado.getSelectedItem()).getId();
                //quiero los datos del empleado seleccionado.
                st = con.createStatement();
                rs = st.executeQuery(sql);
                rs.next();
                sql = "INSERT INTO usuario (idEmpleado, nombreUsuario, contraseña) VALUES (?, ?, MD5(?))";
                //quiero agregar un nuevo usuario.
                ps = con.prepareStatement(sql);//Creo un PreparedStatement para ejecutar sentencias en el DBMS.
                ps.setString(1, rs.getString("idEmpleado"));//el nuevo usuario tendrá como clave su idEmpleado.
                ps.setString(2, "usuario"+ rs.getInt("idEmpleado"));//usuario2 donde el 2 es su idEmpleado
                ps.setString(3, rs.getString("dni"));//su dni será su contraseña
                ps.executeUpdate();
                
                cmbEmpleado.removeAllItems();//vacío el combo y lo vuelvo a llenar actualizado
                sql = "SELECT * FROM empleado LEFT JOIN usuario ON empleado.idEmpleado=usuario.idEmpleado WHERE usuario.idEmpleado IS null";
                //quiero los empleados que no son usuarios del sistema
                rs.close();
                st.close();
                st = con.createStatement();
                rs = st.executeQuery(sql);
                while(rs.next()){
                    ItemDeCombo item = new ItemDeCombo();
                    item.setId(rs.getInt("idEmpleado"));//guardo el id del empleado en el item
                    item.setCadena(rs.getString("idEmpleado")+" - "+ rs.getString("apellido") +", "+ rs.getString("nombre") );
                    //id+apellido+,+nombre
                    cmbEmpleado.addItem(item);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmIniciarSesion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {//Si Class.forName() no encontró el driver
            Logger.getLogger(FrmIniciarSesion.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("No se encontró el driver "+ ParametrosDeConexionBD.DRIVER_JDBC);
        } finally{//libero recursos
            try{
                if(rs != null){rs.close(); System.out.println("ResultSets cerrados");}//liberamos los ResultSet
                if(st != null){st.close(); System.out.println("Statements cerrados");}//liberamos los Statement
                if(ps != null){ps.close(); System.out.println("PreparedStatements cerrados");}//liberamos los PreparedStatement
                if(con != null){con.close(); System.out.println("Connections cerrados");}//liberamos las conexiónes
            } catch (Exception ex){
                ex.printStackTrace();
                System.out.println("Algunos recursos de la conexión con el DBMS no pudieron ser liberados");
            }
        }
    }//GEN-LAST:event_btnConvertirEnUsuarioActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmCrearNuevoUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmCrearNuevoUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmCrearNuevoUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmCrearNuevoUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmCrearNuevoUsuario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConvertirEnUsuario;
    private javax.swing.JButton btnVolver;
    private javax.swing.JComboBox cmbEmpleado;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
